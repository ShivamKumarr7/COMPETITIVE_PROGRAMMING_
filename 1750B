/* shivam */

#include<bits/stdc++.h>
using namespace std;
#define ll long long 
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define ff first
#define ss second
#define setbits(x) __builtin_popcount(x)
#define zerobits(x) __builtin_ctz(x)
#define fastio() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define INF 1e18
#define PI 3.141592653589793238462
#define MOD 1000000007
#define all(x) (x).begin(), (x).end()

#define debug(x)  cout<<#x<<" : "; _print(x); cout<<"\n";

void _print(ll t) {cout << t;}
void _print(int t) {cout << t;}
void _print(string t) {cout << t;}
void _print(char t) {cout << t;}
void _print(double t) {cout << t;}
void _print(bool t) {cout << t;}

template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T> void _print(unordered_set <T> v);
template <class T,class V> void _print(unordered_map <T,V> v);
template <class T, class V> void _print(pair <T, V> p) {_print(p.ff); cout<<" "; _print(p.ss);}
template <class T> void _print(vector <T> v) {for (T i : v) {_print(i); cout << " ";}}
template <class T> void _print(set <T> v) {for (T i : v) {_print(i); cout << " ";}}
template <class T> void _print(multiset <T> v) {for (T i : v) {_print(i); cout << " ";}}
template <class T, class V> void _print(map <T, V> v) {for (auto i : v) {_print(i); cout << " ";}}
template <class T> void _print(unordered_set <T> v)  {for(T i : v) {_print(i); cout<< " ";}}
template <class T,class V> void _print(unordered_map <T,V> v) {for (auto i : v) {_print(i.ff); cout<<"->"; _print(i.ss); cout<<"\n";}}

int main() 
{
    fastio();
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        string s;
        cin>>s;
        int ct_of_zeros = 0;
        int ct_of_ones = 0;
        for(int i=0;i<n;i++)
        {
            if(s[i] == '0')
            {
                ct_of_zeros += 1;
            }
            else
            {
                ct_of_ones += 1;
            }
        }
        ll pure_ka_ans = (ct_of_zeros * 1LL * ct_of_ones);
        // find maximum lenghts of continous 1 
        int maxi_ones_length = 0;
        int temp1 = 0;
        int maxi_zero_length = 0;
        int temp2 = 0;
        for(int i=0;i<n;i++)
        {
            if(s[i] == '1')
            {
                temp1 += 1;
            }
            else
            {
                temp1 = 0;
            }
            maxi_ones_length = max(maxi_ones_length,temp1);
            if(s[i] == '0')
            {
                temp2 += 1;
            }
            else
            {
                temp2 = 0;
            }
            maxi_zero_length = max(maxi_zero_length,temp2);
        }
        // debug(maxi_ones_length);
        // debug(maxi_zero_length);
        ll one_ka_ans = maxi_ones_length * 1LL * maxi_ones_length;
        ll zero_ka_ans = maxi_zero_length * 1LL * maxi_zero_length;
        cout<<max({pure_ka_ans,zero_ka_ans,one_ka_ans})<<"\n";
    }
    return 0;
}
