/* shivam */
 
#include<bits/stdc++.h>
using namespace std;
#define ll long long 
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define ff first
#define ss second
#define setbits(x) __builtin_popcount(x)
#define zerobits(x) __builtin_ctz(x)
#define fastio() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define INF 1e18
#define PI 3.141592653589793238462
#define MOD 1000000007
#define all(x) (x).begin(), (x).end()
 
#define debug(x)  cout<<#x<<" : "; _print(x); cout<<"\n";
 
void _print(ll t) {cout << t;}
void _print(int t) {cout << t;}
void _print(string t) {cout << t;}
void _print(char t) {cout << t;}
void _print(double t) {cout << t;}
void _print(bool t) {cout << t;}
 
template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T> void _print(unordered_set <T> v);
template <class T,class V> void _print(unordered_map <T,V> v);
template <class T, class V> void _print(pair <T, V> p) {_print(p.ff); cout<<" "; _print(p.ss);}
template <class T> void _print(vector <T> v) {for (T i : v) {_print(i); cout << " ";}}
template <class T> void _print(set <T> v) {for (T i : v) {_print(i); cout << " ";}}
template <class T> void _print(multiset <T> v) {for (T i : v) {_print(i); cout << " ";}}
template <class T, class V> void _print(map <T, V> v) {for (auto i : v) {_print(i); cout << " ";}}
template <class T> void _print(unordered_set <T> v)  {for(T i : v) {_print(i); cout<< " ";}}
template <class T,class V> void _print(unordered_map <T,V> v) {for (auto i : v) {_print(i.ff); cout<<"->"; _print(i.ss); cout<<"\n";}}

string decimal_to_binary(int n)
{
    if(n == 0)
    {
        string ans = "0";
        return ans;
    }
    string ans = "";
    while(n)
    {
        if(n & 1)
        {
            ans.pb('1');
        }
        else
        {
            ans.pb('0');
        }
        n = n >> 1;
    }
    return ans;
}

int binary_to_decimal(string a)
{
    if(a == "0")
    {
        return 0;
    }
    int ans = 0;
    int start = 0;
    int n = a.size();
    for(int i=n-1;i>=0;i--)
    {
        ans = ans + ((a[i] - '0') * pow(2,start));
        start += 1;
    }
    return ans;
}

int main() 
{
    fastio();
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        vector<int>v(n,0);
        for(int i=0;i<n;i++)
        {
            cin>>v[i];
        }
        // debug(v);
        sort(all(v));
        // debug(v);
        vector<string>s(n,"0");
        for(int i=0;i<n;i++)
        {
            string temp = decimal_to_binary(v[i]);
            s[i] = temp;
        }
        // debug(s);
        string &maximum = s[n-1];
        string &minimum = s[0];
        // debug(maximum)
        // debug(minimum)
        int maximum_length = maximum.size() - 1;
        int minimum_length = minimum.size() - 1;
        // debug(maximum_length)
        // debug(minimum_length)
        for(int i=n-2;i>=0;i--)
        {
            if(s[i] != maximum)
            {
                string &temp = s[i];
                int sizze = temp.size() - 1;
                int yha_tk = min(maximum_length,sizze);
                int start = 0;
                while(start <= yha_tk)
                {
                    if(maximum[start] == '0' && temp[start] == '1')
                    {
                        swap(maximum[start],temp[start]);
                    }
                    start += 1;
                }
            }
        }
        // debug(s)
        for(int i=1;i<n;i++)
        {
            if(s[i] != minimum)
            {
                string &temp = s[i];
                int sizze = temp.size() - 1;
                int yha_tk = min(minimum_length,sizze);
                int start = 0;
                while(start <= yha_tk)
                {
                    if(minimum[start] == '1' && temp[start] == '0')
                    {
                        swap(minimum[start],temp[start]);
                    }
                    start += 1;
                }
            }
        }
        // debug(maximum)
        // debug(minimum)
        reverse(all(maximum));
        reverse(all(minimum));
        // debug(maximum)
        // debug(minimum)
        int real_max = binary_to_decimal(maximum);
        int real_min = binary_to_decimal(minimum);
        cout<<(real_max - real_min)<<"\n";
    }
    return 0;
}
