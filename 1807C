/* shivam */
 
#include<bits/stdc++.h>
using namespace std;
#define ll long long 
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define ff first
#define ss second
#define setbits(x) __builtin_popcount(x)
#define zerobits(x) __builtin_ctz(x)
#define fastio() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define INF 1e18
#define PI 3.141592653589793238462
#define MOD 1000000007
#define all(x) (x).begin(), (x).end()
 
#define debug(x)  cout<<#x<<" : "; _print(x); cout<<"\n";
 
void _print(ll t) {cout << t;}
void _print(int t) {cout << t;}
void _print(string t) {cout << t;}
void _print(char t) {cout << t;}
void _print(double t) {cout << t;}
void _print(bool t) {cout << t;}
 
template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T> void _print(unordered_set <T> v);
template <class T,class V> void _print(unordered_map <T,V> v);
template <class T, class V> void _print(pair <T, V> p) {_print(p.ff); cout<<" "; _print(p.ss);}
template <class T> void _print(vector <T> v) {for (T i : v) {_print(i); cout << " ";}}
template <class T> void _print(set <T> v) {for (T i : v) {_print(i); cout << " ";}}
template <class T> void _print(multiset <T> v) {for (T i : v) {_print(i); cout << " ";}}
template <class T, class V> void _print(map <T, V> v) {for (auto i : v) {_print(i); cout << " ";}}
template <class T> void _print(unordered_set <T> v)  {for(T i : v) {_print(i); cout<< " ";}}
template <class T,class V> void _print(unordered_map <T,V> v) {for (auto i : v) {_print(i.ff); cout<<"->"; _print(i.ss); cout<<"\n";}}
 
bool helper(string z)
{
    int sizze = z.size();
    for(int i=0;i<sizze-1;i++)
    {
        if(z[i] == z[i+1])
        {
            return false;
        }
    }
    return true;
}
int main() 
{
    fastio();
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        string s;
        cin>>s;
        if(n == 1)
        {
            cout<<"YES\n";
        }
        else if(n == 2)
        {
            if(s[0] == s[1])
            {
                cout<<"NO\n";
            }
            else
            {
                cout<<"YES\n";
            }
        }
        else
        {
            bool intial_check = true;
            for(int i=0;i<n-1;i++)
            {
                if(s[i] == s[i+1])
                {
                    intial_check = false;
                    break;
                }
            }
            if(intial_check)
            {
                string one = "";
                char start = '1';
                unordered_map<char,char>umap;
                for(int i=0;i<n;i++)
                {
                    char temp = s[i];
                    if(umap.find(temp) != umap.end())
                    {
                        char value = umap[temp];
                        one.pb(value);
                    }
                    else
                    {
                        umap.insert({temp,start});
                        one.pb(start);
                    }
                    if(start == '1')
                    {
                        start = '0';
                    }
                    else
                    {
                        start = '1';
                    }
                }
                bool ans1 = helper(one);
                if(ans1)
                {
                    cout<<"YES\n";
                }
                else
                {
                    string zero = "";
                    char starts = '0';
                    for(int i=0;i<n;i++)
                    {
                        char temp = s[i];
                        if(umap.find(temp) != umap.end())
                        {
                            char value = umap[temp];
                            zero.pb(value);
                        }
                        else
                        {
                            umap.insert({temp,start});
                            zero.pb(start);
                        }
                        if(start == '0')
                        {
                            start = '1';
                        }
                        else
                        {
                            start = '0';
                        }
                    }
                    bool ans2 = helper(zero);
                    if(ans2)
                    {
                        cout<<"YES\n";
                    }
                    else
                    {
                        cout<<"NO\n";
                    }
                }
            }
            else
            {
                cout<<"NO\n";
            }
        }
    }
    return 0;
}
