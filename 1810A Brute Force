/* shivam */
 
#include<bits/stdc++.h>
using namespace std;
#define ll long long 
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define ff first
#define ss second
#define setbits(x) __builtin_popcount(x)
#define zerobits(x) __builtin_ctz(x)
#define fastio() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define INF 1e18
#define PI 3.141592653589793238462
#define MOD 1000000007
#define all(x) (x).begin(), (x).end()
 
#define debug(x)  cout<<#x<<" : "; _print(x); cout<<"\n";
 
void _print(ll t) {cout << t;}
void _print(int t) {cout << t;}
void _print(string t) {cout << t;}
void _print(char t) {cout << t;}
void _print(double t) {cout << t;}
void _print(bool t) {cout << t;}
 
template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T> void _print(unordered_set <T> v);
template <class T,class V> void _print(unordered_map <T,V> v);
template <class T, class V> void _print(pair <T, V> p) {_print(p.ff); cout<<" "; _print(p.ss);}
template <class T> void _print(vector <T> v) {for (T i : v) {_print(i); cout << " ";}}
template <class T> void _print(set <T> v) {for (T i : v) {_print(i); cout << " ";}}
template <class T> void _print(multiset <T> v) {for (T i : v) {_print(i); cout << " ";}}
template <class T, class V> void _print(map <T, V> v) {for (auto i : v) {_print(i); cout << " ";}}
template <class T> void _print(unordered_set <T> v)  {for(T i : v) {_print(i); cout<< " ";}}
template <class T,class V> void _print(unordered_map <T,V> v) {for (auto i : v) {_print(i.ff); cout<<"->"; _print(i.ss); cout<<"\n";}}
 
void helper(vector<int>v,int start,int end,vector<int>temp,vector<vector<int>>&ans)
{
    if(start > end)
    {
        if(temp.size() > 0)
        {
            ans.push_back(temp);
        }
        return;
    }
    helper(v,start+1,end,temp,ans);
    temp.push_back(v[start]);
    helper(v,start+1,end,temp,ans);
}
vector<vector<int>> generateSubsequences(vector<int>v)
{
    int start = 0;
    int end = v.size() - 1;
    vector<int>temp;
    vector<vector<int>>ans;
    helper(v,start,end,temp,ans);
    return ans;
}
 
int main()
{
    fastio();
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        vector<int>v(n,0);
        for(int i=0;i<n;i++)
        {
            cin>>v[i];
        }
        bool easy_check = false;
        for(int i=0;i<n;i++)
        {
            if(v[i] == i+1)
            {
                easy_check = true;
                break;
            }
        }
        if(easy_check)
        {
            cout<<"YES\n";
        }
        else
        {
            vector<vector<int>>subsequences = generateSubsequences(v);
            // debug(subsequences);
            bool hard_check = false;
            for(int i=0;i<subsequences.size();i++)
            {
                for(int j=0;j<subsequences[i].size();j++)
                {
                    if(subsequences[i][j] == j+1)
                    {
                        hard_check = true;
                        break;
                    }
                }
            }
            if(hard_check)
            {
                cout<<"YES\n";
            }
            else
            {
                cout<<"NO\n";
            }
        }
    }
    return 0;
}
