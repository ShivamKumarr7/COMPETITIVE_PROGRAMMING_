/* shivam */

// Count no of indexes that can be removed so that the sum of all odd indexed elements and even 
// indexed elements is same.


// A simple O(N^2) solution is to go on every index and then checking if excluding that satisfies 
// the condition or not.
 
#include<bits/stdc++.h>
using namespace std;
#define ll long long 
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define ff first
#define ss second
#define setbits(x) __builtin_popcount(x)
#define zerobits(x) __builtin_ctz(x)
#define fastio() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define INF 1e18
#define PI 3.141592653589793238462
#define MOD 1000000007
#define all(x) (x).begin(), (x).end()
 
#define debug(x)  cout<<#x<<" : "; _print(x); cout<<"\n";
 
void _print(ll t) {cout << t;}
void _print(int t) {cout << t;}
void _print(string t) {cout << t;}
void _print(char t) {cout << t;}
void _print(double t) {cout << t;}
void _print(bool t) {cout << t;}
 
template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T> void _print(unordered_set <T> v);
template <class T,class V> void _print(unordered_map <T,V> v);
template <class T, class V> void _print(pair <T, V> p) {_print(p.ff); cout<<" "; _print(p.ss);}
template <class T> void _print(vector <T> v) {for (T i : v) {_print(i); cout << " ";}}
template <class T> void _print(set <T> v) {for (T i : v) {_print(i); cout << " ";}}
template <class T> void _print(multiset <T> v) {for (T i : v) {_print(i); cout << " ";}}
template <class T, class V> void _print(map <T, V> v) {for (auto i : v) {_print(i); cout << " ";}}
template <class T> void _print(unordered_set <T> v)  {for(T i : v) {_print(i); cout<< " ";}}
template <class T,class V> void _print(unordered_map <T,V> v) {for (auto i : v) {_print(i.ff); cout<<"->"; _print(i.ss); cout<<"\n";}}

bool is_it_balanced(vector<int>temp)
{
    debug(temp);
    int even_idx_sum = 0;
    int odd_idx_sum = 0;
    int sizze = temp.size();
    for(int i=0;i<sizze;i=i+2)
    {
        even_idx_sum += temp[i];
    }
    for(int i=1;i<sizze;i=i+2)
    {
        odd_idx_sum += temp[i];
    }
    if(even_idx_sum == odd_idx_sum)
    {
        return true;
    }
    return false;
}

int count_ways(vector<int>v)
{
    int sizze = v.size();
    int ct = 0;
    for(int i=0;i<sizze;i++)
    {
        vector<int>temp = v;
        vector<int>:: iterator it = temp.begin() + i;
        temp.erase(it);
        bool check = is_it_balanced(temp);
        if(check)
        {
            ct += 1;
        }
    }
    return ct;
}

int main() 
{
    fastio();
    int n;
    cin>>n;
    vector<int>v(n,0);
    for(int i=0;i<n;i++)
    {
        cin>>v[i];
    }
    int ans = count_ways(v);
    cout<<ans<<"\n";
    return 0;
}
