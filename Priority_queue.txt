// PRIORITY QUEUE :- 

// Priority queue are a type of container adaptors,specifically designed such that the first element is the greatest of the 
// element it contains.
// It is max heap by default.


// If we wish to create min-heap for the priority queue then :- 
// priority_queue<int,vector<int>,greater<int>>s; 


// It usually uses a vector or deque internally.


// MEMBER FUNCTIONS :- 

// i) empty --> Test whether the container is empty 
// ii) size --> Returns size 
// iii) top  ---> Access top element 
// iv) push ---> Insert element 
// v) emplace ---> Construct and insert element 
// vi) pop  ---> Remove top element 
// vii) swap  ---> Swap contents 




#include<bits/stdc++.h>
using namespace std;
int main()
{
    priority_queue<int>s;
    s.push(1);
    s.push(2);
    s.push(3);
    s.push(4);
    s.push(5);
    cout<<"size of s : "<<s.size()<<"\n";
    while(!s.empty())
    {
        cout<<s.top()<<" ";
        s.pop();
    }
    cout<<"\n";
    // now lets create a priority queue for min heap 
    priority_queue<int,vector<int>,greater<int>>t;
    t.push(105);
    t.push(104);
    t.push(103);
    t.push(102);
    t.push(101);
    cout<<"size of t : "<<t.size()<<"\n";
    while(!t.empty())
    {
        cout<<t.top()<<" ";
        t.pop();
    }
    cout<<"\n";
    // lets again put some random elements in both the priority queues 
    s.push(674);
    s.push(2474);
    s.push(14);
    priority_queue<int>ss;
    ss.push(47);
    ss.push(456);
    swap(s,ss);
    while(!s.empty())
    {
        cout<<s.top()<<" ";
        s.pop();
    }
    cout<<"\n";
    while(!ss.empty())
    {
        cout<<ss.top()<<" ";
        ss.pop();
    }
    cout<<"\n";
    return 0;
}